# These macros defined by me


[gcode_shell_command backup_cfg]
command: /usr/bin/sh /home/pi/printer_data/config/autocommit.sh
timeout: 30
verbose: True

[gcode_macro BACKUP_CFG]
description: Backs up config directory GitHub
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg

# Alias in case wrong macro name is used somewhere
[gcode_macro PRINT_START]
gcode:
    START_PRINT {rawparams}

[gcode_macro PRINT_END]
gcode:
    END_PRINT {rawparams}

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(50)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
    {% set PREHEAT_EXTRUDER_TEMP = params.PREHEAT_EXTRUDER_TEMP|default(150)|float %}
    # Heat bed for probing
    PRINT MSG="Waiting for bed temp before probing"
    M190 S{BED_TEMP}
    
    # Use absolute coordinates
    G90
    
    # Home the printer
    PRINT MSG="Homing..."
    G28

    # Start hotend preheat for a lower temp before probing
    PRINT MSG="Setting safe preheat temp for extruder"
    M104 S{PREHEAT_EXTRUDER_TEMP}

    # Generate new bed mesh
    PRINT MSG="Generating new bed mesh"
    BED_MESH_CALIBRATE

    # Move the nozzle near the bed
    G1 Z5 F3000
    # Set and wait for nozzle to reach printing temperature
    PRINT MSG="Waiting for extruder to hit print temperature"
    M109 S{EXTRUDER_TEMP}

    PRINT MSG="Prime Line"
    G92 E0 ;Reset Extruder
    G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X0.1 Y20 Z0.3 F5000.0 ; Move to start position
    G1 X0.1 Y200.0 Z0.3 F1500.0 E15 ; Draw the first line
    G1 X0.4 Y200.0 Z0.3 F5000.0 ; Move to side a little
    G1 X0.4 Y20 Z0.3 F1500.0 E30 ; Draw the second line
    G92 E0 ; Reset Extruder
    G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X5 Y20 Z0.3 F5000.0 ; Move over to prevent blob squish

    # Start printing!
    PRINT MSG="{printer.print_stats.filename}"


# Effectively cura default
[gcode_macro END_PRINT]
gcode:
    {% set MACHINE_DEPTH = params.MACHINE_DEPTH|default(220)|float %}

    G91 ;Relative positioning
    G1 E-2 F2700 ;Retract a bit
    G1 E-2 Z0.2 F2400 ;Retract and raise Z
    G1 X5 Y5 F3000 ;Wipe out
    G1 Z10 ;Raise Z more
    G90 ;Absolute positioning
    
    G1 X{MACHINE_DEPTH} Y{MACHINE_DEPTH} ;Present print
    M106 S0 ;Turn-off fan
    M104 S0 ;Turn-off hotend
    M140 S0 ;Turn-off bed
    
    M84 X Y E ;Disable all steppers but Z

# BELOW MACROS WERE SOURCED HERE:
# https://klipper.discourse.group/t/ender-3-v2-cr-touch/3245

# ABL
#[gcode_macro G29]
#variable_parameter_AREA_START : 0,0
#variable_parameter_AREA_END : 0,0
#gcode:
#    BED_MESH_CLEAR
#    BED_MESH_CALIBRATE AREA_START={params.AREA_START} AREA_END={params.AREA_END}
#    G0 X150 Y150 Z150 F6000
#
#[gcode_macro UPDATE_BED_MESH]
#gcode:
#    PRINT MSG="Homing..."
#    G28
#    PRINT MSG="Aligning Z..."
#    G34
#    PRINT MSG="Probing..."
#    BED_MESH_CLEAR
#    BED_MESH_CALIBRATE
#    PRINT MSG="Saving..."
#    SAVE_CONFIG

# send custom msg
# OUTPUT_TARGET 0 : Both LCD and terminal , 1 : Terminal only , 2 : LCD only
[gcode_macro PRINT]
variable_parameter_MSG : ''
variable_parameter_OUTPUT_TARGET : 0
gcode:
    {% if params.OUTPUT_TARGET|default(0)|int == 0 %}
        M117 {params.MSG | string}
        { action_respond_info((params.MSG) | string)}
    {% elif params.OUTPUT_TARGET|default(0)|int == 1 %}
        { action_respond_info((params.MSG) | string)}
    {% else %}
         M117 {params.MSG | string}
    {% endif %}

[gcode_macro AUTO_SAVE_CONFIG]
gcode:
    {% if printer.configfile.save_config_pending %}
        PRINT MSG="Saving config"
        SAVE_CONFIG
    {% endif %}

[gcode_macro CHECK_MESH]
gcode:
    {% set ns = namespace(min_point = printer.bed_mesh.probed_matrix[0][0] ,max_point = printer.bed_mesh.probed_matrix[0][0]) %}

    {% for data_row in printer.bed_mesh.probed_matrix %}
        {% for probe_point in data_row %}
            {% if ns.min_point > probe_point %}
                {% set ns.min_point =  probe_point %}
            {% endif %}
            {% if ns.max_point < probe_point %}
                {% set ns.max_point =  probe_point %}
            {% endif %}
        {% endfor %}
    {% endfor %}

    { action_respond_info( "Mesh delta : " + (ns.max_point - ns.min_point) | string)}
    {% if ns.max_point - ns.min_point > params.THRESHOLD|default(0.3)|float %}
        { action_respond_info("Mesh Error!")}
        ;CANCEL_PRINT
    {% else %}
        { action_respond_info("Mesh OK!")}
    {% endif %}

#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BED_MESH_CALIBRATE_BASE
#; gcode parameters
#variable_parameter_AREA_START : 0,0
#variable_parameter_AREA_END : 0,0
#; the clearance between print area and probe area 
#variable_mesh_area_offset : 5.0
#; number of sample per probe point
#variable_probe_samples : 2
#; minimum and maximum probe count
#variable_min_probe_count : 3
#; scale up the probe count, the vlaue should be 1.0 ~ < max/min probe count
#variable_probe_count_scale_factor : 1.0
#gcode:
#    {% if params.AREA_START and params.AREA_END %}
#        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
#        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
#        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
#        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
#        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
#
#        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
#		{% set area_min_y = params.AREA_START.split(",")[1]|float %}
#		{% set area_max_x = params.AREA_END.split(",")[0]|float %}
#		{% set area_max_y = params.AREA_END.split(",")[1]|float %}
#
#        {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
#        {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
#
#        {% set meshMaxPointX = meshPointX %}
#	    {% set meshMaxPointY = meshPointY %}
#
#
#        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
#            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
#                {% set area_min_x = area_min_x - mesh_area_offset %}
#            {% else %}
#                {% set area_min_x = safe_min_x %}
#            {% endif %}
#
#            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
#                {% set area_min_y = area_min_y - mesh_area_offset %}
#            {% else %}
#                {% set area_min_y = safe_min_y %}
#            {% endif %}
#
#            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
#                {% set area_max_x = area_max_x + mesh_area_offset %}
#            {% else %}
#                {% set area_max_x = safe_max_x %}
#            {% endif %}
#
#            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
#                {% set area_max_y = area_max_y + mesh_area_offset %}
#            {% else %}
#                {% set area_max_y = safe_max_y %}
#            {% endif %}
#
#            PRINT MSG="Set custom mesh area to ({area_min_x},{area_min_y}),({area_max_x},{area_max_y})" OUTPUT_TARGET=1
#
#            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x)  * probe_count_scale_factor|float)|round(0)|int %}
#            {% if meshPointX < min_probe_count %}
#                {% set meshPointX = min_probe_count %}
#            {% endif %}
#            {% if meshPointX > meshMaxPointX %}
#                {% set meshPointX = meshMaxPointX %}
#            {% endif %}
#
#            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor|float)|round(0)|int %}
#            {% if meshPointY < min_probe_count %}
#                {% set meshPointY = min_probe_count %}
#            {% endif %}
#            {% if meshPointY > meshMaxPointY %}
#                {% set meshPointY = meshMaxPointY %}
#            {% endif %}
#
#            PRINT MSG="Set custom mesh matrix to {meshPointX}x{meshPointY}" OUTPUT_TARGET=1
#            PRINT MSG="Mesh: {meshPointX}x{meshPointY}" OUTPUT_TARGET=2
#
#            BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
#        {% else %}
#            PRINT MSG="Invalid custom mesh parameters, probe using default setting" OUTPUT_TARGET=1
#            PRINT MSG="Mesh: default" OUTPUT_TARGET=2
#            BED_MESH_CALIBRATE_BASE
#        {% endif %}
#    {% else %}
#        PRINT MSG="Invalid custom mesh parameters, probe using default setting" OUTPUT_TARGET=1
#        PRINT MSG="Mesh: default" OUTPUT_TARGET=2
#        BED_MESH_CALIBRATE_BASE
#    {% endif %}

